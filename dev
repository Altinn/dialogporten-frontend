#!/bin/bash

# https://stackoverflow.com/a/54261882
prompt_for_multiselect() {
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()   { printf "$ESC[?25h"; }
    cursor_blink_off()  { printf "$ESC[?25l"; }
    cursor_to()         { printf "$ESC[$1;${2:-1}H"; }
    print_inactive()    { printf "$2   $1 "; }
    print_active()      { printf "$2  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()    { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()         {
      local key
      IFS= read -rsn1 key 2>/dev/null >&2
      if [[ $key = ""      ]]; then echo enter; fi;
      if [[ $key = $'\x20' ]]; then echo space; fi;
      if [[ $key = $'\x1b' ]]; then
        read -rsn2 key
        if [[ $key = [A ]]; then echo up;    fi;
        if [[ $key = [B ]]; then echo down;  fi;
      fi 
    }
    toggle_option()    {
      local arr_name=$1
      eval "local arr=(\"\${${arr_name}[@]}\")"
      local option=$2
      if [[ ${arr[option]} == true ]]; then
        arr[option]=
      else
        arr[option]=true
      fi
      eval $arr_name='("${arr[@]}")'
    }

    local retval=$1
    local options
    local defaults

    IFS=';' read -r -a options <<< "$2"
    if [[ -z $3 ]]; then
      defaults=()
    else
      IFS=';' read -r -a defaults <<< "$3"
    fi
    local selected=()

    for ((i=0; i<${#options[@]}; i++)); do
      selected+=("${defaults[i]}")
      printf "\n"
    done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - ${#options[@]}))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local active=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for option in "${options[@]}"; do
            local prefix="[ ]"
            if [[ ${selected[idx]} == true ]]; then
              prefix="[x]"
            fi

            cursor_to $(($startrow + $idx))
            if [ $idx -eq $active ]; then
                print_active "$option" "$prefix"
            else
                print_inactive "$option" "$prefix"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            space)  toggle_option selected $active;;
            enter)  break;;
            up)     ((active--));
                    if [ $active -lt 0 ]; then active=$((${#options[@]} - 1)); fi;;
            down)   ((active++));
                    if [ $active -ge ${#options[@]} ]; then active=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    eval $retval='("${selected[@]}")'
}

read -p "Do you want to run all? [y/N] " answer
# Default to No if no answer is provided
answer=${answer:-N}

# Check if the answer is 'y'
if [ "$answer" == "y" ]; then
	echo "Running all..."
	docker compose watch	
else
	selections=()
	input=$(docker compose config --format json | jq -r '.services | keys | join(";")')
	echo "Select which commands to start (leave blank to start all):"
	prompt_for_multiselect selections "$input"

	IFS=';'
	read -ra projects <<< "$input"

	selected_options=()
	for i in "${!selections[@]}"; do
			if [ "${selections[$i]}" == "true" ]; then
					selected_options+=("${projects[$i]}")
			fi
	done

	# Run docker-compose up -d for each selected service
	IFS=' '
	echo "Starting selected services: ${selected_options[*]}"
	docker-compose up -d ${selected_options[*]}

	# Build the command string for `pnpm mprocs`
	cmd="pnpm mprocs 'docker compose watch --no-up'"

	# Append a 'docker logs -f' command for each selected service
	for service in "${selected_options[@]}"; do
			cmd+=" 'docker logs -f $service'"
	done

	# Execute the command
	echo "Executing: $cmd"
	eval $cmd
fi
