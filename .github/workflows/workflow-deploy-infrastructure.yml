name: Deploy infrastructure
on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_SOURCE_KEY_VAULT_NAME:
        required: true
      AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID:
        required: true
      AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP:
        required: true
      AZURE_CERTIFICATE_KEY_VAULT_NAME:
        required: true
      AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY:
        required: true
      APPLICATION_GATEWAY_WHITELISTED_IPS:
        required: false
    inputs:
      region:
        required: true
        type: string
      environment:
        required: true
        type: string
      dryRun:
        description: "If true, the deployment will be validated but not executed."
        required: false
        type: boolean
        default: false
      version:
        description: "Current version to use as tag"
        required: true
        type: string
      ref:
        description: "The branch or tag ref to deploy. Using default checkout ref if not provided."
        required: false
        default: ${{ github.ref }}
        type: string

concurrency:
  # Existing runs are cancelled if someone repeatedly commits to their own Pull Request (PR). However, it does not stop others' dry runs or actual deployments from the main branch.
  # Also, the cancellation does not occur on merges to the main branch. Therefore, if multiple merges to main are performed simultaneously, they will just be queued up.
  group: deploy-infrastructure-${{ inputs.environment }}-${{ github.ref_name }}-${{ inputs.dryRun }}
  # if the dryrun input is true, we want to cancel any running deployments in order to not block the pipeline e.g for environment approvals
  cancel-in-progress: ${{ inputs.dryRun }}
jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          ref: ${{ inputs.ref }}

      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Fetch secret keys from source Azure Key Vault
        uses: azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        id: keyvault-keys
        with:
          inlineScript: |
            KEY_VAULT_KEYS=$(az keyvault secret list --vault-name ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }} --subscription ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }} --query "[].name" -o json | tr -d '\n')
            echo "::set-output name=key-vault-keys::$KEY_VAULT_KEYS"

      - name: Generate postgresql password
        id: pwd-generator
        shell: pwsh
        run: |
          Import-module "./.github/tools/pwdGenerator.ps1" -Force
          $password = (GeneratePassword -length 30).Password
          echo "::add-mask::$password"
          echo "::set-output name=postgresqlPassword::$password"

      - name: Dryrun Deploy infrastructure (${{ inputs.environment }})
        uses: azure/bicep-deploy@4d5dc29bf04d05546dd5df9c665c54b9c5213207 # v2.2.0
        if: ${{inputs.dryRun}}
        id: deploy-dryrun
        env:
          # parameters
          KEY_VAULT_SOURCE_KEYS: ${{ steps.keyvault-keys.outputs.key-vault-keys }}
          # secrets
          PG_ADMIN_PASSWORD: ${{ steps.pwd-generator.outputs.postgresqlPassword }}
          SOURCE_KEY_VAULT_SUBSCRIPTION_ID: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }}
          SOURCE_KEY_VAULT_RESOURCE_GROUP: ${{ secrets.AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP }}
          SOURCE_KEY_VAULT_NAME: ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }}
          CERTIFICATE_KEY_VAULT_NAME: ${{ secrets.AZURE_CERTIFICATE_KEY_VAULT_NAME }}
          SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY }}
          APPLICATION_GATEWAY_WHITELISTED_IPS: ${{ secrets.APPLICATION_GATEWAY_WHITELISTED_IPS }}
        with:
          scope: subscription
          operation: whatIf
          type: deployment
          template-file: ./.azure/infrastructure/main.bicep
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          name: dp-fe-${{ inputs.environment }}-${{ inputs.version }}
          location: ${{ inputs.region }}
          parameters-file: ./.azure/infrastructure/${{ inputs.environment }}.bicepparam

      - name: Deploy infrastructure (${{ inputs.environment }})
        uses: azure/bicep-deploy@4d5dc29bf04d05546dd5df9c665c54b9c5213207 # v2.2.0
        if: ${{!inputs.dryRun}}
        id: deploy
        env:
          # parameters
          KEY_VAULT_SOURCE_KEYS: ${{ steps.keyvault-keys.outputs.key-vault-keys }}
          # secrets
          PG_ADMIN_PASSWORD: ${{ steps.pwd-generator.outputs.postgresqlPassword }}
          SOURCE_KEY_VAULT_SUBSCRIPTION_ID: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }}
          SOURCE_KEY_VAULT_RESOURCE_GROUP: ${{ secrets.AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP }}
          SOURCE_KEY_VAULT_NAME: ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }}
          CERTIFICATE_KEY_VAULT_NAME: ${{ secrets.AZURE_CERTIFICATE_KEY_VAULT_NAME }}
          SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY }}
          APPLICATION_GATEWAY_WHITELISTED_IPS: ${{ secrets.APPLICATION_GATEWAY_WHITELISTED_IPS }}
        with:
          scope: subscription
          template-file: ./.azure/infrastructure/main.bicep
          type: deployment
          operation: create
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          name: dp-fe-${{ inputs.environment }}-${{ inputs.version }}
          location: ${{ inputs.region }}
          parameters-file: ./.azure/infrastructure/${{ inputs.environment }}.bicepparam

      - name: Logout from azure
        if: ${{failure() || success()}}
        continue-on-error: true
        run: az logout
