name: Build Push to ghcr and deploy to AT
on:
  workflow_dispatch:
  push:
    branches: ['*']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: digdir/dialogporten-frontend
  CONTAINER_APP_CONTAINER_NAME: dialogporten
  CONTAINER_APP_NAME: altinn-dev-dialogporten-app
  CONTAINER_APP_RESOURCE_GROUP_NAME: altinn-dev-dialogporten-rg
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Copy bicep files to artifacts folder
        if: ${{inputs.publishArtifacts}}
        run: cp -rp .azure /artifacts

      - name: Upload artifact for deployment job
        if: ${{inputs.publishArtifacts}}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: /artifacts

  # deploy-at21:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image
  #   permissions:
  #     id-token: write
  #     contents: read
  #     packages: read
  #   environment:
  #     name: dev
  #   steps:
  #     - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         enable-AzPSSession: true

  #     - name: 'Get resource group with PowerShell action'
  #       uses: azure/powershell@v1
  #       with:
  #         inlineScript: |
  #           Get-AzResourceGroup
  #         azPSVersion: 'latest'

  #     - name: Deploy to containerapp
  #       uses: azure/CLI@v1
  #       with:
  #         inlineScript: >
  #           az config set extension.use_dynamic_install=yes_without_prompt

  #           az containerapp update \
  #             --name ${{ env.CONTAINER_APP_NAME }} \
  #             --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} \
  #             --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} \
  #             --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #     - name: logout
  #       run: >
  #         az logout

  deploy-iac:
    #   runs-on: ubuntu-latest
    #   needs: build-and-push-image
    environment:
      name: dev
    name: Deploy to dev
    # name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      id-token: write
      contents: read
      packages: read
    # environment:
    # ${{ inputs.environment }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: 'Get resource group with PowerShell action'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Get-AzResourceGroup
          azPSVersion: 'latest'
      # - name: Login to azure
      #   id: azureLogin
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy infrastructure
        id: bicep
        shell: pwsh
        run: >
          .azure/deployBicep.ps1 
          -environment "dev"
          -subscriptionId ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get postgre connectionstring
        id: postgreConnectionString
        shell: pwsh
        run: >
          .azure/powershell/fetchKeyvaultSecret.ps1
          -secretId ${{ steps.bicep.outputs.psqlConnectionStringSecretUri }}

      - name: Fetch runners public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Open postgre firewall for migrations
        run: >
          az postgres flexible-server firewall-rule create 
          --rule-name GithubActions 
          --name ${{ steps.bicep.outputs.postgreServerName }}
          --resource-group ${{ steps.bicep.outputs.resourceGroupName }}
          --start-ip-address ${{ steps.ip.outputs.ipv4 }}

      - name: Apply EF migration script
        run: ${{ steps.postgreConnectionString.outputs.value }} -f ./database/migrate.sql -q

      # - name: Deploy to Azure Web App
      #   id: deploy-to-webapp
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ steps.bicep.outputs.websiteName }}
      #     slot-name: 'production'
      #     package: ./webApi
      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: >
            az config set extension.use_dynamic_install=yes_without_prompt

            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} \
              --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Close postgre firewall
        if: ${{failure() || success()}}
        continue-on-error: true
        run: >
          az postgres flexible-server firewall-rule delete 
          --rule-name GithubActions 
          --name ${{ steps.bicep.outputs.postgreServerName }}
          --resource-group ${{ steps.bicep.outputs.resourceGroupName }}
          --yes

      - name: Logout from azure
        if: ${{failure() || success()}}
        continue-on-error: true
        run: az logout
