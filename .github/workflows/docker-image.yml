name: Build Push to ghcr and deploy to AT
on:
  workflow_dispatch:
  push:
    branches: ['*']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: digdir/dialogporten-frontend
  CONTAINER_APP_CONTAINER_NAME: dialogporten
  CONTAINER_APP_NAME: altinn-fe-test-dialogporten-app
  CONTAINER_APP_RESOURCE_GROUP_NAME: altinn-fe-test-dialogporten-rg
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy .azure directory to artifact
        run: |
          # Make sure the .azure directory exists
          if [ -d .azure ]; then
            # Create the destination directory if it doesn't exist
            mkdir -p /home/runner/work/dialogporten-frontend/dialogporten-frontend/artifacts
            # Copy the .azure directory to the destination
            cp -r .azure /home/runner/work/dialogporten-frontend/dialogporten-frontend/artifacts/.azure
          fi
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

      - name: Upload .azure directory as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}/artifacts

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # deploy-at21:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image
  #   permissions:
  #     id-token: write
  #     contents: read
  #     packages: read
  #   environment:
  #     name: dev
  #   steps:
  #     - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         enable-AzPSSession: true

  #     - name: 'Get resource group with PowerShell action'
  #       uses: azure/powershell@v1
  #       with:
  #         inlineScript: |
  #           Get-AzResourceGroup
  #         azPSVersion: 'latest'

  #     - name: Deploy to containerapp
  #       uses: azure/CLI@v1
  #       with:
  #         inlineScript: >
  #           az config set extension.use_dynamic_install=yes_without_prompt

  #           az containerapp update \
  #             --name ${{ env.CONTAINER_APP_NAME }} \
  #             --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} \
  #             --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} \
  #             --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #     - name: logout
  #       run: >
  #         az logout

  deploy-iac:
    #   runs-on: ubuntu-latest
    #   needs: build-and-push-image
    environment:
      name: test
    name: Deploy to test
    # name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      id-token: write
      contents: read
      packages: read
    # environment:
    # ${{ inputs.environment }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # - name: Get current date
      #   id: date
      #   run: |
      #     echo "{date}={$(date +'%Y-%m-%d')}" >> $GITHUB_STATE

      - name: 'Get resource group with PowerShell action'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Get-AzResourceGroup
          azPSVersion: 'latest'

      - name: Deploy infrastructure
        id: bicep
        shell: pwsh
        run: >
          .azure/deployBicep.ps1 
          -environment test
          -subscriptionId ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          -imageUrl ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          -deployTimestamp ${{ github.event.repository.updated_at}}

      - name: Logout from azure
        if: ${{failure() || success()}}
        continue-on-error: true
        run: az logout
